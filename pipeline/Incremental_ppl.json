{
	"name": "Incremental_ppl",
	"properties": {
		"activities": [
			{
				"name": "Lookupforlastprocessingtime",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "SELECT MAX(LastProcessedTime) AS LastProcessedTime FROM ControlTable;",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ls_controltable",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Copy incremental data from source to destination",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Lookupforlastprocessingtime",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT * FROM SourceTable\nWHERE ModifiedDate > '@{activity('Lookupforlastprocessingtime').output.firstRow.LastProcessedTime}'\n\n",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBehavior": "upsert",
						"upsertSettings": {
							"useTempDB": true,
							"keys": [
								"ID"
							]
						},
						"sqlWriterUseTableLock": false,
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "ls_source",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "ds_destination",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Stored procedure1",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Copy incremental data from source to destination",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[UpdateControlTable]",
					"storedProcedureParameters": {
						"NewLastProcessedTime": {
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							},
							"type": "Datetime"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_azuredb",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Slack notification upon success",
				"type": "WebHook",
				"dependsOn": [
					{
						"activity": "Stored procedure1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": "https://hooks.slack.com/services/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",
					"method": "POST",
					"headers": {
						"content-type": "application/json"
					},
					"body": {
						"text": "The data ingestion pipeline has succeeded."
					},
					"timeout": "00:01:00"
				}
			},
			{
				"name": "Slack notification upon failure",
				"type": "WebHook",
				"dependsOn": [
					{
						"activity": "Stored procedure1",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": "https://hooks.slack.com/services/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",
					"method": "POST",
					"headers": {
						"content-type": "application/json"
					},
					"body": {
						"text": "The data ingestion pipeline has failed."
					},
					"timeout": "00:01:00"
				}
			}
		],
		"annotations": []
	}
}